PARSER_BEGIN(FrontEnd)
    public class FrontEnd {
        public static void main(String[] args){
            FrontEnd parser;
            if (args.length == 0) {
                System.out.println("FrontEnd Parser: Reading from standard input . . .");
                parser = new FrontEnd(System.in);
                } else if (args.length == 1) {
                    System.out.println("FrontEnd Parser: Reading from file " + args[0] + " . . .");
                try {
                    parser = new FrontEnd(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("FrontEnd Parser: File " + args[0] + " not found.");
                    return;
                }
            } else {
                    System.out.println("FrontEnd Parser: Usage is one of:");
                    System.out.println(" java FrontEndParser < inputfile");
                    System.out.println("OR");
                    System.out.println(" java FrontEndParser inputfile");
                    return;
            } 
            try {
                parser.Program();
                System.out.println("SLP Parser: SLP program parsed successfully.");
                } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("SLP Parser: Encountered errors during parse.");
}
        }
    }
PARSER_END(FrontEnd)

/*Token*/

TOKEN: { /* Keywords */
    < VAR : "var" >
    | < CONST : "const" >
    | < RETURN : "return" >
    | < BOOLEAN : "boolean" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < WHILE : "while" >
    | < SKP : "skip" >
    | < INTEGER : "integer">
}

TOKEN: {    /* Punctuation */ 
    < COMMA : "," >
    | < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : "=" >
    | < LBRACE : "{" >
    | < RBRACE : "}" >
    | < LBRACKET : "(" >
    | < RBRACKET : ")" >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < TILDE : "~" >
    | < OR : "||" >
    | < AND : "&&" >
    | < EQUIV : "==" >
    | < NOTEQUIV : "!=" >
    | < LTHAN : "<" >
    | < GTHAN : ">" >
    | < LETHAN : "<=" >
    | < GETHAN : ">=" >
}

TOKEN: { /* Numbers and identifiers */
      < #DIGIT : ["0"-"9"] >
    | < #CHAR : ["a"-"z", "A"-"Z"] >
    | < NUMBER : ("-")* ["1"-"9"] (<DIGIT>)* | "0" >
    | < ID : <CHAR> (<CHAR>| "_" | <DIGIT>)* >
}

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

SKIP : { /*Ignore whitespaces*/
     " "
    | "\t"
    | "\n"
    | "\f"
    | "\r"
}

SKIP : {
    < "//" ([" " - "~"])* ("\n" | "\r" | "\r\n") >
    | "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
      "/*" {commentNesting++; }
    | "*/" {commentNesting--; 
            if (commentNesting == 0)
                SwitchTo(DEFAULT);
            }
    | <~[]>
}

void Program(): {}
{
    (DeclList() FunctionList() <MAIN> <EOF>)
}

void DeclList(): {}
{
    (Decl() [<SEMIC> DeclList()])?
}

void Decl(): {}
{
    VarDecl()
    | ConstDecl()
}

void VarDecl(): {}
{
    (<VAR> <ID> <COLON> Type())
}

void ConstDecl(): {}
{
    (<CONST> <ID> <COLON> Type() <ASSIGN> Expression())
}

void FunctionList(): {}
{
    (Function() FunctionList())?
}

void Function(): {}
{
    Type() <ID> <LBRACKET> ParameterList() <RBRACKET> 
    <LBRACE>
    DeclList()
    <RBRACE>
    StatementBlock() 
    <RETURN> <LBRACKET> (Expression())? <RBRACKET><SEMIC>
    <RBRACE>
}

void Type(): {}
{
    <INTEGER>
    | <BOOLEAN>
    | <VOID>
}

void ParameterList(): {}
{
    (NempParameterList())?
}

void NempParameterList(): {}
{
      <ID> <COLON> Type() NempParameterListPrime()
}

void NempParameterListPrime(): {}
{
    <COMMA> NempParameterList()
}

void Main(): {}
{
    <MAIN> <LBRACE>
    DeclList()
    StatementBlock()
    <RBRACE>
}

void StatementBlock(): {}
{
    (Statement() StatementBlock())?
}

void Statement(): {}
{
    <ID> StatementPrime()
    | <LBRACE> StatementBlock() <RBRACE>
    | <IF> Condition() <LBRACE> StatementBlock() <RBRACE> <ELSE> <LBRACE> StatementBlock() <RBRACE>
    | <WHILE> Condition() <LBRACE> StatementBlock() <RBRACE>
    | <SKP> <SEMIC>
}

void StatementPrime(): {}
{
    <ASSIGN> Expression() <SEMIC>
    | <LBRACKET> ArgList() <RBRACKET> <SEMIC>
}

void Expression(): {}
{
    Fragment() ExpressionPrime()
    | <ID> <LBRACKET> ArgList() <RBRACKET>
    | <LBRACKET> Expression() <RBRACKET>
}

void ExpressionPrime(): {}
{
    BinaryArithOp() Fragment()
}

void BinaryArithOp(): {}
{
    <PLUS_SIGN> 
    | <MINUS_SIGN>
}

void Fragment(): {}
{
    <ID> FragmentPrime()
    | <MINUS_SIGN> <ID>
    | <NUMBER>
    | <TRUE>
    | <FALSE>
    | <LBRACKET> Expression() <RBRACKET> FragmentPrime()
}

void FragmentPrime(): {}
{
    <LBRACKET> ArgList() <RBRACKET> FragmentPrime()
    | (ExpressionPrime() FragmentPrime())?
}

void Condition(): {}
{
    <TILDE> Condition() ConditionPrime()
    | <LBRACKET> Condition() <RBRACKET>  ConditionPrime()
    | Expression() CompOp() Expression() ConditionPrime()
}

void ConditionPrime(): {}
{
    ((<OR> | <AND>) Condition() ConditionPrime())?
}

void CompOp(): {}
{
    <EQUIV>
    | <NOTEQUIV>
    | <LTHAN>
    | <LETHAN>
    | <GTHAN>
    | <GETHAN>
}

void ArgList(): {}
{
    (NempArgList())?
}

void NempArgList(): {}
{
    <ID> NempArgListPrime()
}

void NempArgListPrime(): {}
{
    <COMMA> (NempArgList())
}