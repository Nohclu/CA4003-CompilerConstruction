PARSER_BEGIN(FrontEnd)
    public class FrontEnd {
        public static void main(String[] args){

        }
    }
PARSER_END(FrontEnd)

/*Token*/

var, const, return, integer, boolean,
void, main, if, else, true, false, while and skip.

TOKEN: { /* Keywords */
    < VAR : "var" >
    | < CONST : "const" >
    | < RETURN : "return" >
    | < BOOLEAN : "boolean" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < WHILE : "while" >
    | < SKIP : "skip" >
}

TOKEN: {    /* Punctuation */ 
    < COMMA : "," >
    | < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : "=" >
    | < LBRACE : "{" >
    | < RBRACE : "}" >
    | < LBRACKET : "(" >
    | < RBRACKET : ")" >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < TILDE : "~" >
    | < OR : "||" >
    | < AND : "&&" >
    | < EQUIV : "==" >
    | < NOTEQUIV : "!=" >
    | < LTHAN : "<" >
    | < GTHAN : ">" >
    | < LETHAN : "<=" >
    | < GETHAN : ">=" >
}

TOKEN: { /* Numbers and identifiers */
      < #DIGIT : ["0"-"9"] >
    | < #CHAR : ["aA"-"zZ"] >
    | < INTEGER : (<MINUS_SIGN>)? ["1"-"9"] (<DIGIT>)* | "0" >
    | < ID : (<CHAR>) (<CHAR><DIGIT>)* "_"* >
}

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

SKIP : { /*Ignore whitespaces*/
    | " "
    | "\t"
    | "\n"
}

SKIP : {
    < "//" (<CHAR> | <DIGIT>)* *("\n" | "\r" | "\r\n") >
    | "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    | "/*" {commentNesting++; }
    | "*/" {commentNesting--; 
            if (commentNesting == 0)
                SwitchTo(DEFAULT);
            }
    | <~[]>
}