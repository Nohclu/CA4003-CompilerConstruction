/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. BackEnd.jj */
/*@egen*/options { 
    IGNORE_CASE = true;
                             
}

PARSER_BEGIN(BackEnd)
    public class BackEnd/*@bgen(jjtree)*/implements BackEndTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTBackEndState jjtree = new JJTBackEndState();

/*@egen*/
        public static void main(String[] args){
            BackEnd parser;
            if (args.length == 0) {
                System.out.println("BackEnd Parser: Reading from standard input . . .");
                parser = new BackEnd(System.in);
                } else if (args.length == 1) {
                    System.out.println("BackEnd Parser: Reading from file " + args[0] + " . . .");
                    try {
                        parser = new BackEnd(new java.io.FileInputStream(args[0]));
                    } catch (java.io.FileNotFoundException e) {
                        System.out.println("BackEnd Parser: File " + args[0] + " not found.");
                        return;
                }
            } else {
                    System.out.println("BackEnd Parser: Usage is one of:");
                    System.out.println(" java BackEndParser < inputfile");
                    System.out.println("OR");
                    System.out.println(" java BackEndParser inputfile");
                    return;
            } 
            try {
                SimpleNode root = parser.Program();
                root.dump("");
                System.out.println("CCAL Parser: CCAL program parsed successfully.");
                } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("CCAL Parser: Encountered errors during parse.");
            }
        }
    }
PARSER_END(BackEnd)

/*Token*/

TOKEN: { /* Keywords */
    < VAR : "var" >
    | < CONST : "const" >
    | < RETURN : "return" >
    | < BOOLEAN : "boolean" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < WHILE : "while" >
    | < SKP : "skip" >
    | < INTEGER : "integer">
}

TOKEN: {    /* Punctuation */ 
    < COMMA : "," >
    | < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : "=" >
    | < LBRC : "{" >
    | < RBRC : "}" >
    | < LPAR : "(" >
    | < RPAR : ")" >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < TILDE : "~" >
    | < OR : "||" >
    | < AND : "&&" >
    | < EQUIV : "==" >
    | < NOTEQUIV : "!=" >
    | < LTHAN : "<" >
    | < GTHAN : ">" >
    | < LETHAN : "<=" >
    | < GETHAN : ">=" >
}

TOKEN: { /* Numbers and identifiers */
      < #DIGIT : ["0"-"9"] >
    | < #CHAR : ["a"-"z", "A"-"Z"] >
    | < NUMBER : ("-")* ["1"-"9"] (<DIGIT>)* | "0" >
    | < ID : <CHAR> (<CHAR>| "_" | <DIGIT>)* >
}

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

SKIP : { /*Ignore whitespaces*/
     " "
    | "\t"
    | "\n"
    | "\f"
    | "\r"
}

SKIP : {
    < "//" ([" " - "~"])* ("\n" | "\r" | "\r\n") >
    | "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
      "/*" {commentNesting++; }
    | "*/" {commentNesting--; 
            if (commentNesting == 0)
                SwitchTo(DEFAULT);
            }
    | <~[]>
}

SimpleNode Program()         : {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    DeclList() FunctionList() Main() <EOF>/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DeclList(): {}
{
    Decl() <SEMIC> DeclList() 
    | {}
}

void Decl(): 
{}
{
    VarDecl()
    | ConstDecl()
}

void VarDecl(): 
{}
{
    <VAR> <ID> <COLON> Type()
}

void ConstDecl(): {}
{
    <CONST> <ID> <COLON> Type() <ASSIGN> Expression()
}

void FunctionList(): {}
{
    Function() FunctionList()
    | {}
}

void Function(): {}
{
    Type() <ID> <LPAR> ParameterList() <RPAR> 
    <LBRC> 
    DeclList() StatementBlock() 
    <RETURN> <LPAR> (Expression() | {}) <RPAR> <SEMIC> 
    <RBRC>
}

void Type(): {}
{
    <INTEGER>
    | <BOOLEAN>
    | <VOID>
}

void ParameterList(): {}
{
    NempParameterList()
    | {}
}

void NempParameterList(): {}
{
    <ID> <COLON> Type() (<COMMA> NempParameterList() | {})
}

void Main()      : {/*@bgen(jjtree) Main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    <MAIN> <LBRC> 
    DeclList() StatementBlock() 
    <RBRC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StatementBlock(): {}
{
    (Statement() StatementBlock())
    | {}
}

void Statement(): {}
{
    <ID> (<ASSIGN> Expression() <SEMIC> | <LPAR> ArgList() <RPAR> <SEMIC>)
    | <LBRC> StatementBlock() <RBRC>
    | <IF> Condition() <LBRC> StatementBlock() <RBRC> <ELSE> <LBRC> StatementBlock() <RBRC>
    | <WHILE> Condition() <LBRC> StatementBlock() <RBRC>
    | <SKP> <SEMIC>
}

void Expression(): {}
{
     Fragment() (BinaryArithOp() Fragment() | {})
    | <LPAR> Expression() <RPAR> 
}

void BinaryArithOp(): {}
{
    <PLUS_SIGN> 
    | <MINUS_SIGN>
}

void Fragment(): {}
{
    (<MINUS_SIGN> | {}) <ID> (<LPAR> ArgList() <RPAR> | {}) FragmentPrime()
    | <NUMBER> FragmentPrime()
    | <TRUE> FragmentPrime()
    | <FALSE> FragmentPrime()
}

void FragmentPrime(): {}
{
    BinaryArithOp() Expression() FragmentPrime()
    | {}
}

void Condition(): {}
{ 
     <TILDE> Condition() ConditionPrime()
    | <LPAR> Condition() <RPAR> ConditionPrime()
    | Fragment() CompOp() Expression() ConditionPrime()
}

void ConditionPrime(): {}
{
    (<OR> | <AND>) Condition() ConditionPrime()
    | {}
}

void CompOp(): {}
{
    <EQUIV>
    | <NOTEQUIV>
    | <LTHAN>
    | <LETHAN>
    | <GTHAN>
    | <GETHAN>
}

void ArgList(): {}
{
    NempArgList()
    | {}
}

void NempArgList(): {}
{
    <ID> (<COMMA> NempArgList() | {})
}
