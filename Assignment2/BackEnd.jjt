options { 
    IGNORE_CASE = true;
    NODE_DEFAULT_VOID = true;
    DEBUG_TOKEN_MANAGER = false;
    MULTI = true;
    NODE_PREFIX = "AST";
}

PARSER_BEGIN(BackEnd)
    public class BackEnd {
        public static void main(String[] args){
            BackEnd parser;
            if (args.length == 1) {
                System.out.println("BackEnd Parser: Reading from file " + args[0] + " . . .");
                try {
                    parser = new BackEnd(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("BackEnd Parser: File " + args[0] + " not found.");
                    return;
                }
            } else {
                    System.out.println("BackEnd Parser: Usage is one of:");
                    System.out.println(" java BackEndParser < inputfile");
                    System.out.println("OR");
                    System.out.println(" java BackEndParser inputfile");
                    return;
            } 
            try {
                SimpleNode root = parser.Program();
                root.dump("");
                System.out.println("CCAL Parser: CCAL program parsed successfully.");
                } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("CCAL Parser: Encountered errors during parse.");
            }
        }
    }
PARSER_END(BackEnd)

/*Token*/

TOKEN: { /* Keywords */
    < VAR : "var" >
    | < CONST : "const" >
    | < RETURN : "return" >
    | < BOOLEAN : "boolean" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < WHILE : "while" >
    | < SKP : "skip" >
    | < INTEGER : "integer">
}

TOKEN: {    /* Punctuation */ 
    < COMMA : "," >
    | < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : "=" >
    | < LBRC : "{" >
    | < RBRC : "}" >
    | < LPAR : "(" >
    | < RPAR : ")" >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < TILDE : "~" >
    | < OR : "||" >
    | < AND : "&&" >
    | < EQUIV : "==" >
    | < NOTEQUIV : "!=" >
    | < LTHAN : "<" >
    | < GTHAN : ">" >
    | < LETHAN : "<=" >
    | < GETHAN : ">=" >
}

TOKEN: { /* Numbers and identifiers */
      < #DIGIT : ["0"-"9"] >
    | < #CHAR : ["a"-"z", "A"-"Z"] >
    | < NUMBER : ("-")* ["1"-"9"] (<DIGIT>)* | "0" >
    | < ID : <CHAR> (<CHAR>| "_" | <DIGIT>)* >
}

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

SKIP : { /*Ignore whitespace*/
     " "
    | "\t"
    | "\n"
    | "\f"
    | "\r"
}

SKIP : {
    < "//" ([" " - "~"])* ("\n" | "\r" | "\r\n") >
    | "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
      "/*" {commentNesting++; }
    | "*/" {commentNesting--; 
            if (commentNesting == 0)
                SwitchTo(DEFAULT);
            }
    | <~[]>
}

SimpleNode Program() #Root: {}
{
    DeclList() FunctionList() Main() <EOF> {return jjtThis;}
}

void DeclList(): {}
{
    Decl() <SEMIC> DeclList() 
    | {}
}

void Decl(): {}
{
    VarDecl()
    | ConstDecl()
}

void VarDecl() #Var: {Token t; String id; String type;}
{
    t = <VAR> id = Id() <COLON> type = Type()
}

void ConstDecl() #Const: {Token t; String id; String type;}
{
    t = <CONST> id = Id() <COLON> type = Type() <ASSIGN> Expression()
}

void FunctionList(): {}
{
    Function() FunctionList()
    | {}
}

void Function(): {}
{
    Type() <ID> <LPAR> ParameterList() <RPAR> 
    <LBRC> 
    DeclList() StatementBlock() 
    <RETURN> <LPAR> (Expression() | {}) <RPAR> <SEMIC> 
    <RBRC>
}


void ParameterList(): {}
{
    NempParameterList()
    | {}
}

void NempParameterList(): {}
{
    <ID> <COLON> Type() (<COMMA> NempParameterList() | {})
}

void Main() #Main: {Token t;}
{
    <MAIN> <LBRC> 
    DeclList() StatementBlock() 
    <RBRC>
}

void StatementBlock(): {}
{
    (Statement() StatementBlock())
    | {}
}

void Statement(): {Token t;}
{
    Id() (t = <ASSIGN> Expression() <SEMIC> {jjtThis.value = t.image;} #Assign | <LPAR> ArgList() <RPAR> <SEMIC>)
    | <LBRC> StatementBlock() <RBRC>
    | <IF> Condition() <LBRC> StatementBlock() <RBRC> <ELSE> <LBRC> StatementBlock() <RBRC> 
    | <WHILE> Condition() <LBRC> StatementBlock() <RBRC>
    | <SKP> <SEMIC>
}

void Expression(): {}
{
     Fragment() (BinaryArithOp() Fragment() | {})
    | <LPAR> Expression() <RPAR> 
}

void BinaryArithOp(): {Token t;}
{
    t = <PLUS_SIGN> {jjtThis.value = t.image;} #PLUS
    | t = <MINUS_SIGN> {jjtThis.value = t.image;} #MINUS
}

void Fragment(): {Token t;}
{
    (<MINUS_SIGN> | {}) t = <ID> (<LPAR> ArgList() <RPAR> | {}) FragmentPrime() #Arith()
    | Num() FragmentPrime()
    | <TRUE> FragmentPrime()
    | <FALSE> FragmentPrime()
}

void FragmentPrime(): {}
{
    BinaryArithOp() Expression() FragmentPrime()
    | {}
}

void Condition(): {}
{ 
     <TILDE> Condition() ConditionPrime()
    | <LPAR> Condition() <RPAR> ConditionPrime()
    | Fragment() CompOp() Expression() ConditionPrime()
}

void ConditionPrime(): {}
{
    (<OR> | <AND>) Condition() ConditionPrime()
    | {}
}

void CompOp(): {}
{
    <EQUIV>
    | <NOTEQUIV>
    | <LTHAN>
    | <LETHAN>
    | <GTHAN>
    | <GETHAN>
}

void ArgList(): {}
{
    NempArgList()
    | {}
}

void NempArgList(): {}
{
    <ID> (<COMMA> NempArgList() | {})
}

String Type() #Type: {Token t;}
{
    t = <INTEGER> {jjtThis.value = t.image; return t.image;}
    | t = <BOOLEAN> {jjtThis.value = t.image; return t.image;}
    | t = <VOID> {jjtThis.value = t.image; return t.image;}
}

String Id() #ID: {Token t;}
{
    t = <ID> {jjtThis.value = t.image; return t.image;}
}

String Num() #Num: {Token t;}
{
    t = <NUMBER> {jjtThis.value = t.image; return t.image;}
}